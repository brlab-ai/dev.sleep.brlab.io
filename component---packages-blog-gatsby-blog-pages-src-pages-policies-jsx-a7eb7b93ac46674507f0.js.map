{"version":3,"file":"component---packages-blog-gatsby-blog-pages-src-pages-policies-jsx-a7eb7b93ac46674507f0.js","mappings":"2KAoBAA,EAAOC,QAlBP,SAAgBC,EAAQC,GACtBA,EAASA,GAAUC,KAAKC,UAIxB,IAHA,IAAIC,EAAQ,GACRC,EAAS,CAAC,EAELC,EAAI,EAAGA,EAAIN,EAAOO,OAAQD,IAAK,CACtC,IAAIE,EAAOR,EAAOM,GACdG,EAASR,EAAOO,GAEfH,EAAOI,KACVL,EAAMM,KAAKF,GACXH,EAAOI,IAAU,EAErB,CAEA,OAAOL,CACT,C,iHCfaO,EAAiB,WAC5B,IAAQC,GAAqBC,EAAAA,EAAAA,gBAAeC,GAApCF,iBACR,OAAOA,EAAiBG,MACpBC,IAAOJ,EAAiBG,OAAO,SAAAE,GAAI,OAAIA,EAAKC,IAAT,IACnC,IACL,EAEKJ,EAAY,aCPLK,G,QAAiB,WAC5B,IAAQC,GAAoBP,EAAAA,EAAAA,gBAAeQ,GAAnCD,gBACR,OAAOA,EAAgBL,MACnBC,IAAOI,EAAgBL,OAAO,SAAAE,GAAI,OAAIA,EAAKC,IAAT,IAClC,IACL,GAGKG,EAAa,Y,qICCZC,EAAgBC,EAAQ,MAAxBD,aAgDP,UA9CqB,SAAAE,GACnB,IAAMC,GAAWN,EAAAA,EAAAA,MACjB,GAAkBO,EAAAA,EAAAA,KAAXC,EAAP,EAAOA,EAAGC,EAAV,EAAUA,KAEV,OACE,QAAC,KAAWJ,GACV,QAAC,IAAD,CAAKK,MAAOF,EAAE,eACd,QAAC,IAAD,OACA,QAAC,KAAD,CAAOG,YAAa,CAAEC,OAAQ,gBAE5B,QAAC,IAAD,CACIC,OAAQL,EAAE,gBAMhB,QAAC,KAAD,MACE,QAAC,KAAD,KACGF,EAASQ,KAAI,SAACC,EAAQ5B,GAAT,OACZ,QAAC,WAAD,CAAgB6B,IAAG,QAAU7B,IAC3B,QAAC,IAAD,OACA,QAAC,KAAD,CAAM8B,QAAQ,OAAOC,GAAIC,EAAAA,KAAOC,GAAIjB,EAAa,CAACkB,IAAI,WAAYN,EAAOhB,KAAQuB,OAAQb,EAAKc,aAC5F,QAAC,IAAD,CAAWV,OAAQE,EAAOL,SAJlB,MAYvB,C,sFCzCKc,EAAS,CACbC,MAAO,CACLC,SAAU,GAEZC,UAAW,CACTC,WAAW,OACXC,MAAM,aAERC,YAAa,CACXF,WAAW,OACXC,MAAM,YACNE,GAAI,IA8BR,EA1BkB,SAAC,GAAgD,IAA9ClB,EAA6C,EAA7CA,OAAQc,EAAqC,EAArCA,UAAWK,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WAC/C,OACE,oBACE,QAAC,KAAD,CAAShB,QAAQ,KAAKC,GAAG,MACtBL,EAAQ,IACRoB,IACC,QAAC,KAAD,CAAOhB,QAAQ,YAAYiB,GAAIV,EAAOC,OACnC,IACAQ,IAINN,IACC,QAAC,KAAD,CAAMV,QAAQ,KAAKiB,GAAIV,EAAOG,WAC3BA,GAGJK,IACC,QAAC,KAAD,CAAMf,QAAQ,KAAKiB,GAAIV,EAAOM,aAC3BE,GAKV,C","sources":["webpack://@elegantstack/gatsby-starter-flexiblog-news/../node_modules/dedupe/index.js","webpack://@elegantstack/gatsby-starter-flexiblog-news/../packages/blog/gatsby-blog-helpers/src/useBlogAuthors.jsx","webpack://@elegantstack/gatsby-starter-flexiblog-news/../packages/blog/gatsby-blog-helpers/src/usePolicyPages.jsx","webpack://@elegantstack/gatsby-starter-flexiblog-news/../packages/blog/gatsby-blog-pages/src/pages/policies.jsx","webpack://@elegantstack/gatsby-starter-flexiblog-news/../packages/flow-ui/flow-ui-components/src/PageTitle/PageTitle.jsx"],"sourcesContent":["'use strict';\n\nfunction dedupe(client, hasher) {\n  hasher = hasher || JSON.stringify;\n  var clone = [];\n  var lookup = {};\n\n  for (var i = 0; i < client.length; i++) {\n    var elem = client[i];\n    var hashed = hasher(elem);\n\n    if (!lookup[hashed]) {\n      clone.push(elem);\n      lookup[hashed] = true;\n    }\n  }\n\n  return clone;\n}\n\nmodule.exports = dedupe;","import { useStaticQuery, graphql } from 'gatsby'\r\nimport dedupe from 'dedupe'\r\n\r\nexport const useBlogAuthors = () => {\r\n  const { allArticleAuthor } = useStaticQuery(authorsQuery)\r\n  return allArticleAuthor.nodes\r\n    ? dedupe(allArticleAuthor.nodes, node => node.slug)\r\n    : null\r\n}\r\n\r\nconst authorsQuery = graphql`\r\n  query allArticleAuthorQuery {\r\n    allArticleAuthor {\r\n      nodes {\r\n        ...ArticleAuthor\r\n      }\r\n    }\r\n  }\r\n`\r\n","import { useStaticQuery, graphql } from 'gatsby'\r\nimport dedupe from 'dedupe'\r\n\r\nexport const usePolicyPages = () => {\r\n  const { allStrapiPolicy } = useStaticQuery(policiesQuery)\r\n  return allStrapiPolicy.nodes\r\n    ? dedupe(allStrapiPolicy.nodes, node => node.slug)\r\n    : null\r\n}\r\n\r\n\r\nconst policiesQuery = graphql`\r\n  query allStrapiPolicyQuery($language: String) {\r\n    allStrapiPolicy(filter: {  locale: { eq: $language } }) {\r\n      nodes {\r\n        title\r\n        slug\r\n        pages {\r\n          body {\r\n            data\r\n          }\r\n          publishedAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from 'react'\r\nimport { Layout, Stack, Main } from '@layout'\r\nimport PageTitle from '@components/PageTitle'\r\nimport Divider from '@components/Divider'\r\nimport Seo from '@widgets/Seo'\r\nimport { usePolicyPages } from '@helpers-blog'\r\nimport {graphql} from 'gatsby'\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { Link as GLink } from 'gatsby'\r\nimport {  Link } from 'theme-ui'\r\n\r\n\r\nconst {localizedUrl} = require(\"../../../../../site/src/util\")\r\n\r\nconst PagePolicies = props => {\r\n  const policies = usePolicyPages()\r\n  const {t, i18n} = useTranslation()\r\n  \r\n  return (\r\n    <Layout {...props}>\r\n      <Seo title={t('Policies')} />\r\n      <Divider />\r\n      <Stack effectProps={{ effect: 'fadeInDown' }}>\r\n      \r\n        <PageTitle\r\n            header={t('Policies')}\r\n            // subheader='FlexiBlog theme comes with a pre-made contact form component. You can integrate this form with serverless services such as Formspree, Getform, FormKeep and others to receive form submissions via email.'\r\n          />\r\n\r\n        \r\n      </Stack>\r\n      <Stack>\r\n        <Main>\r\n          {policies.map((policy, i) => (\r\n            <React.Fragment key={`item-${i}`}>\r\n              <Divider />\r\n              <Link variant='mute' as={GLink} to={localizedUrl({url: `/policy/${policy.slug}`, locale: i18n.language})}>\r\n                <PageTitle header={policy.title}  />\r\n              </Link>\r\n            </React.Fragment>\r\n          ))}\r\n        </Main>\r\n      </Stack>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query ($language: String!) {\r\n    locales: allLocale(filter: { language: { eq: $language } }) {\r\n      edges {\r\n        node {\r\n          ns\r\n          data\r\n          language\r\n        }\r\n      }\r\n    }\r\n  }`  \r\n\r\nexport default PagePolicies\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Heading, Text, Badge } from 'theme-ui'\r\n\r\nconst styles = {\r\n  count: {\r\n    fontSize: 4\r\n  },\r\n  subheader: {\r\n    fontWeight: `body`,\r\n    color: `omegaDark`\r\n  },\r\n  runninghead: {\r\n    fontWeight: `body`,\r\n    color: `omegaDark`,\r\n    mb: 0\r\n  }\r\n}\r\n\r\nconst PageTitle = ({ header, subheader, running, totalCount }) => {\r\n  return (\r\n    <div>\r\n      <Heading variant='h1' as='h1'>\r\n        {header}{' '}\r\n        {totalCount && (\r\n          <Badge variant='tag-white' sx={styles.count}>\r\n            {' '}\r\n            {totalCount}\r\n          </Badge>\r\n        )}\r\n      </Heading>\r\n      {subheader && (\r\n        <Text variant='h3' sx={styles.subheader}>\r\n          {subheader}\r\n        </Text>\r\n      )}\r\n      {running && (\r\n        <Text variant='h4' sx={styles.runninghead}>\r\n          {running}\r\n        </Text>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PageTitle\r\n\r\nPageTitle.propTypes = {\r\n  title: PropTypes.string,\r\n  subheader: PropTypes.string,\r\n  running: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  totalCount: PropTypes.number\r\n}\r\n"],"names":["module","exports","client","hasher","JSON","stringify","clone","lookup","i","length","elem","hashed","push","useBlogAuthors","allArticleAuthor","useStaticQuery","authorsQuery","nodes","dedupe","node","slug","usePolicyPages","allStrapiPolicy","policiesQuery","localizedUrl","require","props","policies","useTranslation","t","i18n","title","effectProps","effect","header","map","policy","key","variant","as","GLink","to","url","locale","language","styles","count","fontSize","subheader","fontWeight","color","runninghead","mb","running","totalCount","sx"],"sourceRoot":""}